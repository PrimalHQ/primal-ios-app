// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -O -module-name PrimalShared
import Combine
import Foundation
@_exported import PrimalShared
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension PrimalShared.SkieSwiftFlowProtocol {
  public func toPublisher() -> some Combine.Publisher<Self.Element, _Concurrency.CancellationError>
  
}
extension Combine.Publisher where Self.Failure == _Concurrency.CancellationError {
  public func sink(receiveValue: @escaping ((Self.Output) -> Swift.Void)) -> Combine.AnyCancellable
}
public enum Skie {
  public enum KotlinxCoroutinesCore {
    public enum Flow {
      public typealias __Kotlin = PrimalShared.Kotlinx_coroutines_coreFlow
    }
    public enum StateFlow {
      public typealias __Kotlin = PrimalShared.Kotlinx_coroutines_coreStateFlow
    }
    public enum SharedFlow {
      public typealias __Kotlin = PrimalShared.Kotlinx_coroutines_coreSharedFlow
    }
    public enum MutableSharedFlow {
      public typealias __Kotlin = PrimalShared.Kotlinx_coroutines_coreMutableSharedFlow
    }
    public enum MutableStateFlow {
      public typealias __Kotlin = PrimalShared.Kotlinx_coroutines_coreMutableStateFlow
    }
    public enum Runnable {
      public typealias __Kotlin = PrimalShared.Kotlinx_coroutines_coreRunnable
    }
    public enum SelectClause0 {
    }
    public enum SelectClause {
    }
    public enum SelectInstance {
    }
    public enum SelectClause1 {
    }
    public enum SelectClause2 {
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_coroutines_core = PrimalShared.Skie.KotlinxCoroutinesCore
  public enum RuntimeKotlin {
    public enum SkieColdFlowIterator {
      public typealias __Kotlin = PrimalShared.SkieColdFlowIterator
    }
    public enum SkieKotlinFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinFlow
    }
    public enum SkieKotlinMutableSharedFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinMutableSharedFlow
    }
    public enum SkieKotlinMutableStateFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinMutableStateFlow
    }
    public enum SkieKotlinOptionalFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinOptionalFlow
    }
    public enum SkieKotlinOptionalMutableSharedFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinOptionalMutableSharedFlow
    }
    public enum SkieKotlinOptionalMutableStateFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinOptionalMutableStateFlow
    }
    public enum SkieKotlinOptionalSharedFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinOptionalSharedFlow
    }
    public enum SkieKotlinOptionalStateFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinOptionalStateFlow
    }
    public enum SkieKotlinSharedFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinSharedFlow
    }
    public enum SkieKotlinStateFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinStateFlow
    }
    public enum Skie_CancellationHandler {
      public typealias __Kotlin = PrimalShared.Skie_CancellationHandler
    }
    public enum Skie_DispatcherDelegate {
      public typealias __Kotlin = PrimalShared.Skie_DispatcherDelegate
    }
    public enum Skie_SuspendHandler {
      public typealias __Kotlin = PrimalShared.Skie_SuspendHandler
    }
    public enum Skie_SuspendResult {
      public typealias __Kotlin = PrimalShared.Skie_SuspendResult
      public enum Success {
        public typealias __Kotlin = PrimalShared.Skie_SuspendResult.Success
      }
      public enum Error {
        public typealias __Kotlin = PrimalShared.Skie_SuspendResult.Error
      }
      public enum Canceled {
        public typealias __Kotlin = PrimalShared.Skie_SuspendResult.Canceled
      }
    }
  }
  public typealias co_touchlab_skie__runtime_kotlin = PrimalShared.Skie.RuntimeKotlin
  public enum Primal {
    public enum UploadStatus {
    }
  }
  public typealias Primal_domain__primal = PrimalShared.Skie.Primal
  public enum KotlinxSerializationCore {
    public enum SerialKind {
    }
    public enum SerializersModule {
    }
    public enum PolymorphicKind {
    }
    public enum PrimitiveKind {
    }
    public enum StructureKind {
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_serialization_core = PrimalShared.Skie.KotlinxSerializationCore
  public enum KotlinxSerializationJson {
    public enum JsonElement {
    }
    public enum JsonPrimitive {
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_serialization_json = PrimalShared.Skie.KotlinxSerializationJson
  public enum KotlinxDatetime {
    public enum DateTimeFormat {
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_datetime = PrimalShared.Skie.KotlinxDatetime
  public enum PagingCommon {
    public enum LoadState {
    }
  }
  public typealias androidx_paging__paging_common = PrimalShared.Skie.PagingCommon
}
@_hasMissingDesignatedInitializers public class SkieSwiftFlowIterator<T> : _Concurrency.AsyncIteratorProtocol {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func next() async -> T?
  @objc deinit
  public typealias Element = T
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncIteratorProtocol_Failure = Swift.Never
  #endif
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol SkieSwiftFlowProtocol<Element> : _Concurrency.AsyncSequence {
  associatedtype Element
  associatedtype Delegate : PrimalShared.Kotlinx_coroutines_coreFlow
}
#else
public protocol SkieSwiftFlowProtocol : _Concurrency.AsyncSequence {
  associatedtype Element
  associatedtype Delegate : PrimalShared.Kotlinx_coroutines_coreFlow
}
#endif
@_hasMissingDesignatedInitializers final public class SkieSwiftFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinOptionalFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinOptionalFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftSharedFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var replayCache: [T] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinSharedFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinSharedFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinSharedFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreSharedFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalSharedFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var replayCache: [T?] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreSharedFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableSharedFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var subscriptionCount: PrimalShared.SkieSwiftStateFlow<PrimalShared.KotlinInt> {
    get
  }
  final public var replayCache: [T] {
    get
  }
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T) async throws
  final public func tryEmit(value: T) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinMutableSharedFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinMutableSharedFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinMutableSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreMutableSharedFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableSharedFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var subscriptionCount: PrimalShared.SkieSwiftStateFlow<PrimalShared.KotlinInt> {
    get
  }
  final public var replayCache: [T?] {
    get
  }
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T?) async throws
  final public func tryEmit(value: T?) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreMutableSharedFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftStateFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T {
    get
  }
  final public var replayCache: [T] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinStateFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinStateFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinStateFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreStateFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalStateFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T? {
    get
  }
  final public var replayCache: [T?] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalStateFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalStateFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreStateFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableStateFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T {
    get
    set(value)
  }
  final public var replayCache: [T] {
    get
  }
  final public var subscriptionCount: PrimalShared.SkieSwiftStateFlow<PrimalShared.KotlinInt> {
    get
  }
  final public func compareAndSet(expect: T, update: T) -> Swift.Bool
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T) async throws
  final public func tryEmit(value: T) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinMutableStateFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinMutableStateFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinMutableStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinMutableStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinMutableStateFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreMutableStateFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableStateFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T? {
    get
    set(value)
  }
  final public var replayCache: [T?] {
    get
  }
  final public var subscriptionCount: PrimalShared.SkieSwiftStateFlow<PrimalShared.KotlinInt> {
    get
  }
  final public func compareAndSet(expect: T?, update: T?) -> Swift.Bool
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T?) async throws
  final public func tryEmit(value: T?) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreMutableStateFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
extension PrimalShared.FeedRepository {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func fetchConversation(userId: Swift.String, noteId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findAllPostsByIds(postIds: [Swift.String]) async throws -> [PrimalShared.FeedPost]
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findConversation(userId: Swift.String, noteId: Swift.String) async throws -> [PrimalShared.FeedPost]
}
extension PrimalShared.Kotlinx_coroutines_coreFlow {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func collect(collector: any PrimalShared.Kotlinx_coroutines_coreFlowCollector) async throws
}
extension PrimalShared.Kotlinx_coroutines_coreFlowCollector {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func emit(value: Any?) async throws
}
extension PrimalShared.NostrEventImporter {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func importEvents(events: [PrimalShared.NostrEvent]) async throws -> PrimalShared.KotlinBoolean
}
extension PrimalShared.PrimalPublisher {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func signPublishImportNostrEvent(unsignedNostrEvent: PrimalShared.NostrUnsignedEvent, outboxRelays: [Swift.String]) async throws -> PrimalShared.PrimalPublishResult
}
extension PrimalShared.EventInteractionRepository {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func likeEvent(userId: Swift.String, eventId: Swift.String, eventAuthorId: Swift.String, optionalTags: [[PrimalShared.Kotlinx_serialization_jsonJsonElement]]) async throws -> PrimalShared.PrimalPublishResult
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func repostEvent(userId: Swift.String, eventId: Swift.String, eventKind: Swift.Int32, eventAuthorId: Swift.String, eventRawNostrEvent: Swift.String, optionalTags: [[PrimalShared.Kotlinx_serialization_jsonJsonElement]]) async throws -> PrimalShared.PrimalPublishResult
}
extension PrimalShared.EventRepository {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func fetchEventActions(eventId: Swift.String, kind: Swift.Int32) async throws -> [PrimalShared.NostrEventAction]
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func fetchEventZaps(userId: Swift.String, eventId: Swift.String, limit: Swift.Int32) async throws
}
extension PrimalShared.HighlightRepository {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func publishAndSaveHighlight(userId: Swift.String, content: Swift.String, referencedEventATag: Swift.String?, referencedEventAuthorTag: Swift.String?, context: Swift.String?, alt: Swift.String, createdAt: Swift.Int64) async throws -> PrimalShared.Nevent
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func publishDeleteHighlight(userId: Swift.String, highlightId: Swift.String) async throws
}
extension PrimalShared.MutedUserRepository {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func fetchAndPersistMuteList(userId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func muteUserAndPersistMuteList(userId: Swift.String, mutedUserId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func unmuteUserAndPersistMuteList(userId: Swift.String, unmutedUserId: Swift.String) async throws
}
extension PrimalShared.ProfileRepository {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func fetchFollowers(profileId: Swift.String) async throws -> [PrimalShared.UserProfileSearchItem]
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func fetchFollowing(profileId: Swift.String) async throws -> [PrimalShared.UserProfileSearchItem]
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func fetchProfile(profileId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func fetchProfileId(primalName: Swift.String) async throws -> Swift.String?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func fetchUserProfileFollowedBy(profileId: Swift.String, userId: Swift.String, limit: Swift.Int32) async throws -> [PrimalShared.ProfileData]
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findProfileData(profileIds: [Swift.String]) async throws -> [[PrimalShared.ProfileData]]
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findProfileDataOrNull(profileId: Swift.String) async throws -> PrimalShared.ProfileData?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func isUserFollowing(userId: Swift.String, targetUserId: Swift.String) async throws -> PrimalShared.KotlinBoolean
}
extension PrimalShared.Kotlinx_coroutines_coreJob {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func join() async throws
}
extension PrimalShared.Skie.RuntimeKotlin.SkieColdFlowIterator {
  public struct __Suspend<E> where E : AnyObject {
    public let __kotlinObject: PrimalShared.SkieColdFlowIterator<E>
    public init(_ __kotlinObject: PrimalShared.SkieColdFlowIterator<E>)
  }
}
public func skie<E>(_ kotlinObject: PrimalShared.SkieColdFlowIterator<E>) -> PrimalShared.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend<E> where E : AnyObject
extension PrimalShared.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func hasNext() async throws -> PrimalShared.KotlinBoolean
}
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftFlow<T>) -> PrimalShared.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftSharedFlow<T>) -> PrimalShared.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftFlow<T>) -> PrimalShared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftSharedFlow<T>) -> PrimalShared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
}
extension PrimalShared.SkieSwiftFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
}
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftOptionalFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>)
}
extension PrimalShared.SkieSwiftOptionalFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>)
}
public func SkieKotlinSharedFlow<T>(_ flow: PrimalShared.SkieSwiftSharedFlow<T>) -> PrimalShared.SkieKotlinSharedFlow<T> where T : AnyObject
public func SkieKotlinSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinSharedFlow<T> where T : AnyObject
public func SkieKotlinSharedFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinSharedFlow<T> where T : AnyObject
public func SkieKotlinSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinSharedFlow<T> where T : AnyObject
public func SkieKotlinSharedFlow<T>(_ flow: PrimalShared.SkieSwiftSharedFlow<T>) -> PrimalShared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinSharedFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftSharedFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
}
extension PrimalShared.SkieSwiftSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
}
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftOptionalSharedFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>)
}
extension PrimalShared.SkieSwiftOptionalSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>)
}
public func SkieKotlinMutableSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinMutableSharedFlow<T> where T : AnyObject
public func SkieKotlinMutableSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
}
extension PrimalShared.SkieSwiftMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
}
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftOptionalMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>)
}
extension PrimalShared.SkieSwiftOptionalMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>)
}
public func SkieKotlinStateFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinStateFlow<T> where T : AnyObject
public func SkieKotlinStateFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinStateFlow<T> where T : AnyObject
public func SkieKotlinStateFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinStateFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftStateFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
}
extension PrimalShared.SkieSwiftStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
}
public func SkieKotlinOptionalStateFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalStateFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>) -> PrimalShared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalStateFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalStateFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalStateFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalStateFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>) -> PrimalShared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalStateFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalStateFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftOptionalStateFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>)
}
extension PrimalShared.SkieSwiftOptionalStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>)
}
public func SkieKotlinMutableStateFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinMutableStateFlow<T> where T : AnyObject
public func SkieKotlinMutableStateFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
}
extension PrimalShared.SkieSwiftMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
}
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftOptionalMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>)
}
extension PrimalShared.SkieSwiftOptionalMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>)
}
@frozen public enum EventUriType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case image
  case video
  case audio
  case pdf
  case youTube
  case rumble
  case spotify
  case tidal
  case gitHub
  case other
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__EventUriType, result: inout PrimalShared.EventUriType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__EventUriType, result: inout PrimalShared.EventUriType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__EventUriType?) -> PrimalShared.EventUriType
  public func _bridgeToObjectiveC() -> PrimalShared.__EventUriType
  public typealias _ObjectiveCType = PrimalShared.__EventUriType
  public static func == (a: PrimalShared.EventUriType, b: PrimalShared.EventUriType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.EventUriType]
  nonisolated public static var allCases: [PrimalShared.EventUriType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.EventUriType {
  public func toKotlinEnum() -> PrimalShared.__EventUriType
}
extension PrimalShared.__EventUriType {
  public func toSwiftEnum() -> PrimalShared.EventUriType
}
@frozen public enum EventUriNostrType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case zap
  case note
  case profile
  case article
  case highlight
  case unsupported
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__EventUriNostrType, result: inout PrimalShared.EventUriNostrType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__EventUriNostrType, result: inout PrimalShared.EventUriNostrType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__EventUriNostrType?) -> PrimalShared.EventUriNostrType
  public func _bridgeToObjectiveC() -> PrimalShared.__EventUriNostrType
  public typealias _ObjectiveCType = PrimalShared.__EventUriNostrType
  public static func == (a: PrimalShared.EventUriNostrType, b: PrimalShared.EventUriNostrType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.EventUriNostrType]
  nonisolated public static var allCases: [PrimalShared.EventUriNostrType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.EventUriNostrType {
  public func toKotlinEnum() -> PrimalShared.__EventUriNostrType
}
extension PrimalShared.__EventUriNostrType {
  public func toSwiftEnum() -> PrimalShared.EventUriNostrType
}
@frozen public enum BookmarkType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case note
  case article
  public var id: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__BookmarkType, result: inout PrimalShared.BookmarkType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__BookmarkType, result: inout PrimalShared.BookmarkType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__BookmarkType?) -> PrimalShared.BookmarkType
  public func _bridgeToObjectiveC() -> PrimalShared.__BookmarkType
  public typealias _ObjectiveCType = PrimalShared.__BookmarkType
  public static func == (a: PrimalShared.BookmarkType, b: PrimalShared.BookmarkType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.BookmarkType]
  nonisolated public static var allCases: [PrimalShared.BookmarkType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.BookmarkType {
  public func toKotlinEnum() -> PrimalShared.__BookmarkType
}
extension PrimalShared.__BookmarkType {
  public func toSwiftEnum() -> PrimalShared.BookmarkType
}
@frozen public enum ConversationRelation : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case follows
  case other
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static var companion: PrimalShared.__ConversationRelation.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__ConversationRelation, result: inout PrimalShared.ConversationRelation?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__ConversationRelation, result: inout PrimalShared.ConversationRelation?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__ConversationRelation?) -> PrimalShared.ConversationRelation
  public func _bridgeToObjectiveC() -> PrimalShared.__ConversationRelation
  public typealias _ObjectiveCType = PrimalShared.__ConversationRelation
  public typealias Companion = PrimalShared.__ConversationRelation.Companion
  public static func == (a: PrimalShared.ConversationRelation, b: PrimalShared.ConversationRelation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.ConversationRelation]
  nonisolated public static var allCases: [PrimalShared.ConversationRelation] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.ConversationRelation {
  public func toKotlinEnum() -> PrimalShared.__ConversationRelation
}
extension PrimalShared.__ConversationRelation {
  public func toSwiftEnum() -> PrimalShared.ConversationRelation
}
@frozen public enum FeedSpecKind : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case reads
  case notes
  public var id: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__FeedSpecKind, result: inout PrimalShared.FeedSpecKind?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__FeedSpecKind, result: inout PrimalShared.FeedSpecKind?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__FeedSpecKind?) -> PrimalShared.FeedSpecKind
  public func _bridgeToObjectiveC() -> PrimalShared.__FeedSpecKind
  public typealias _ObjectiveCType = PrimalShared.__FeedSpecKind
  public static func == (a: PrimalShared.FeedSpecKind, b: PrimalShared.FeedSpecKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.FeedSpecKind]
  nonisolated public static var allCases: [PrimalShared.FeedSpecKind] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.FeedSpecKind {
  public func toKotlinEnum() -> PrimalShared.__FeedSpecKind
}
extension PrimalShared.__FeedSpecKind {
  public func toSwiftEnum() -> PrimalShared.FeedSpecKind
}
@frozen public enum PrimalScope : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case follows
  case tribe
  case network
  case global
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__PrimalScope, result: inout PrimalShared.PrimalScope?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalScope, result: inout PrimalShared.PrimalScope?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalScope?) -> PrimalShared.PrimalScope
  public func _bridgeToObjectiveC() -> PrimalShared.__PrimalScope
  public typealias _ObjectiveCType = PrimalShared.__PrimalScope
  public static func == (a: PrimalShared.PrimalScope, b: PrimalShared.PrimalScope) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.PrimalScope]
  nonisolated public static var allCases: [PrimalShared.PrimalScope] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.PrimalScope {
  public func toKotlinEnum() -> PrimalShared.__PrimalScope
}
extension PrimalShared.__PrimalScope {
  public func toSwiftEnum() -> PrimalShared.PrimalScope
}
@frozen public enum PrimalServerType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case caching
  case upload
  case wallet
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__PrimalServerType, result: inout PrimalShared.PrimalServerType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalServerType, result: inout PrimalShared.PrimalServerType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalServerType?) -> PrimalShared.PrimalServerType
  public func _bridgeToObjectiveC() -> PrimalShared.__PrimalServerType
  public typealias _ObjectiveCType = PrimalShared.__PrimalServerType
  public static func == (a: PrimalShared.PrimalServerType, b: PrimalShared.PrimalServerType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.PrimalServerType]
  nonisolated public static var allCases: [PrimalShared.PrimalServerType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.PrimalServerType {
  public func toKotlinEnum() -> PrimalShared.__PrimalServerType
}
extension PrimalShared.__PrimalServerType {
  public func toSwiftEnum() -> PrimalShared.PrimalServerType
}
@frozen public enum PrimalTimeframe : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case trending
  case zapped
  case popular
  case latest
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__PrimalTimeframe, result: inout PrimalShared.PrimalTimeframe?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalTimeframe, result: inout PrimalShared.PrimalTimeframe?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalTimeframe?) -> PrimalShared.PrimalTimeframe
  public func _bridgeToObjectiveC() -> PrimalShared.__PrimalTimeframe
  public typealias _ObjectiveCType = PrimalShared.__PrimalTimeframe
  public static func == (a: PrimalShared.PrimalTimeframe, b: PrimalShared.PrimalTimeframe) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.PrimalTimeframe]
  nonisolated public static var allCases: [PrimalShared.PrimalTimeframe] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.PrimalTimeframe {
  public func toKotlinEnum() -> PrimalShared.__PrimalTimeframe
}
extension PrimalShared.__PrimalTimeframe {
  public func toSwiftEnum() -> PrimalShared.PrimalTimeframe
}
extension PrimalShared.Nip19TLV {
  public typealias Type_ = PrimalShared.__Bridge__Nip19TLV_Type_
}
extension PrimalShared.__Bridge__Nip19TLV_Type_ {
  public func toKotlinEnum() -> PrimalShared.Nip19TLV.__Type_
}
extension PrimalShared.Nip19TLV.__Type_ {
  public func toSwiftEnum() -> PrimalShared.Nip19TLV.Type_
}
@frozen public enum __Bridge__Nip19TLV_Type_ : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case special
  case relay
  case author
  case kind
  public var id: Swift.Int8 {
    get
  }
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.Nip19TLV.__Type_, result: inout PrimalShared.Nip19TLV.Type_?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.Nip19TLV.__Type_, result: inout PrimalShared.Nip19TLV.Type_?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.Nip19TLV.__Type_?) -> PrimalShared.__Bridge__Nip19TLV_Type_
  public func _bridgeToObjectiveC() -> PrimalShared.Nip19TLV.__Type_
  public typealias _ObjectiveCType = PrimalShared.Nip19TLV.__Type_
  public static func == (a: PrimalShared.__Bridge__Nip19TLV_Type_, b: PrimalShared.__Bridge__Nip19TLV_Type_) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.__Bridge__Nip19TLV_Type_]
  nonisolated public static var allCases: [PrimalShared.__Bridge__Nip19TLV_Type_] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public enum NostrEventKind : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case metadata
  case shortTextNote
  case recommendRelay
  case followList
  case encryptedDirectMessages
  case eventDeletion
  case shortTextNoteRepost
  case reaction
  case badgeAward
  case genericRepost
  case pictureNote
  case channelCreation
  case channelMetadata
  case channelMessage
  case channelHideMessage
  case channelMuteUser
  case fileMetadata
  case reporting
  case zapRequest
  case zap
  case highlight
  case muteList
  case pinList
  case relayListMetadata
  case bookmarksList
  case blossomServerList
  case walletInfo
  case clientAuthentication
  case walletRequest
  case walletResponse
  case nostrConnect
  case categorizedPeopleList
  case categorizedBookmarkList
  case profileBadges
  case badgeDefinition
  case longFormContent
  case applicationSpecificData
  case appRecommendation
  case appHandler
  case primalEventStats
  case primalNetStats
  case primalExploreLegendCounts
  case primalDefaultSettings
  case primalUserProfileStats
  case primalReferencedEvent
  case primalUserScores
  case primalRelays
  case primalNotification
  case primalNotificationsSeenUntil
  case primalPaging
  case primalMediaMapping
  case primalEventUserStats
  case primalDirectMessagesConversationsSummary
  case primalCdnResource
  case primalSimpleUploadRequest
  case primalUploadResponse
  case primalDefaultRelaysList
  case primalIsUserFollowing
  case primalLinkPreview
  case primalNotificationsSummary2
  case primalUserFollowersCounts
  case primalDirectMessagesUnreadCount2
  case primalChunkedUploadRequest
  case primalUserRelaysList
  case primalRelayHint
  case primalLongFormWordsCount
  case primalBroadcastResult
  case primalLongFormContentFeeds
  case primalSubSettings
  case primalDvmFeedFollowsActions
  case primalExplorePeopleNewFollowStats
  case primalUserNames
  case primalDvmFeedMetadata
  case primalTrendingTopics
  case primalClientConfig
  case primalUserMediaStorageStats
  case primalUserUploadInfo
  case primalContentBroadcastStats
  case primalContentBroadcastStatus
  case primalLegendProfiles
  case primalPremiumInfo
  case primalLegendLeaderboard
  case primalPremiumLeaderboard
  case primalWalletOperation
  case primalWalletBalance
  case primalWalletDepositInvoice
  case primalWalletDepositLnUrl
  case primalWalletTransactions
  case primalWalletExchangeRate
  case primalWalletIsUser
  case primalWalletUserInfo
  case primalWalletInAppPurchaseQuote
  case primalWalletInAppPurchase
  case primalWalletActivation
  case primalWalletParsedLnUrl
  case primalWalletParsedLnInvoice
  case primalWalletMiningFees
  case primalWalletOnChainAddress
  case primalWalletUpdatedAt
  case primalWalletNwcConnectionCreated
  case primalWalletNwcConnectionList
  case primalMembershipNameAvailable
  case primalMembershipLegendPaymentInstructions
  case primalMembershipPurchaseMonitor
  case primalMembershipStatus
  case primalMembershipHistory
  case primalAppState
  case primalLongFormContent
  case unknown
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: PrimalShared.__NostrEventKind.Companion {
    get
  }
  public func isNotPrimalEventKind() -> Swift.Bool
  public func isNotUnknown() -> Swift.Bool
  public func isPrimalEventKind() -> Swift.Bool
  public func isUnknown() -> Swift.Bool
  public func asKindTag() -> [PrimalShared.Kotlinx_serialization_jsonJsonElement]
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__NostrEventKind, result: inout PrimalShared.NostrEventKind?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__NostrEventKind, result: inout PrimalShared.NostrEventKind?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__NostrEventKind?) -> PrimalShared.NostrEventKind
  public func _bridgeToObjectiveC() -> PrimalShared.__NostrEventKind
  public typealias _ObjectiveCType = PrimalShared.__NostrEventKind
  public typealias Companion = PrimalShared.__NostrEventKind.Companion
  public static func == (a: PrimalShared.NostrEventKind, b: PrimalShared.NostrEventKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.NostrEventKind]
  nonisolated public static var allCases: [PrimalShared.NostrEventKind] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.NostrEventKind {
  public func toKotlinEnum() -> PrimalShared.__NostrEventKind
}
extension PrimalShared.__NostrEventKind {
  public func toSwiftEnum() -> PrimalShared.NostrEventKind
}
@frozen public enum Paging_commonLoadType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case refresh
  case prepend
  case append
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__Paging_commonLoadType, result: inout PrimalShared.Paging_commonLoadType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__Paging_commonLoadType, result: inout PrimalShared.Paging_commonLoadType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__Paging_commonLoadType?) -> PrimalShared.Paging_commonLoadType
  public func _bridgeToObjectiveC() -> PrimalShared.__Paging_commonLoadType
  public typealias _ObjectiveCType = PrimalShared.__Paging_commonLoadType
  public static func == (a: PrimalShared.Paging_commonLoadType, b: PrimalShared.Paging_commonLoadType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.Paging_commonLoadType]
  nonisolated public static var allCases: [PrimalShared.Paging_commonLoadType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.Paging_commonLoadType {
  public func toKotlinEnum() -> PrimalShared.__Paging_commonLoadType
}
extension PrimalShared.__Paging_commonLoadType {
  public func toSwiftEnum() -> PrimalShared.Paging_commonLoadType
}
extension PrimalShared.Skie.Primal.UploadStatus {
  @frozen public enum __Sealed : Swift.Hashable {
    case uploadCompleted(PrimalShared.UploadStatus.UploadCompleted)
    case uploadFailed(PrimalShared.UploadStatus.UploadFailed)
    case uploading(PrimalShared.UploadStatus.Uploading)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.Primal.UploadStatus.__Sealed, b: PrimalShared.Skie.Primal.UploadStatus.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.Primal.UploadStatus.__Sealed where __Sealed : PrimalShared.UploadStatus
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.Primal.UploadStatus.__Sealed? where __Sealed : PrimalShared.UploadStatus
extension PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause0 {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause0.__Sealed, b: PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause0.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause0.__Sealed where __Sealed : PrimalShared.Kotlinx_coroutines_coreSelectClause0
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause0.__Sealed? where __Sealed : PrimalShared.Kotlinx_coroutines_coreSelectClause0
extension PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause {
  @frozen public enum __Sealed {
    case selectClause0(any PrimalShared.Kotlinx_coroutines_coreSelectClause0)
    case selectClause1(any PrimalShared.Kotlinx_coroutines_coreSelectClause1)
    case selectClause2(any PrimalShared.Kotlinx_coroutines_coreSelectClause2)
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause.__Sealed where __Sealed : PrimalShared.Kotlinx_coroutines_coreSelectClause
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause.__Sealed? where __Sealed : PrimalShared.Kotlinx_coroutines_coreSelectClause
extension PrimalShared.Skie.KotlinxCoroutinesCore.SelectInstance {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: PrimalShared.Skie.KotlinxCoroutinesCore.SelectInstance.__Sealed, b: PrimalShared.Skie.KotlinxCoroutinesCore.SelectInstance.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxCoroutinesCore.SelectInstance.__Sealed where __Sealed : PrimalShared.Kotlinx_coroutines_coreSelectInstance
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxCoroutinesCore.SelectInstance.__Sealed? where __Sealed : PrimalShared.Kotlinx_coroutines_coreSelectInstance
extension PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause1 {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause1.__Sealed, b: PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause1.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause1.__Sealed where __Sealed : PrimalShared.Kotlinx_coroutines_coreSelectClause1
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause1.__Sealed? where __Sealed : PrimalShared.Kotlinx_coroutines_coreSelectClause1
extension PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause2 {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause2.__Sealed, b: PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause2.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause2.__Sealed where __Sealed : PrimalShared.Kotlinx_coroutines_coreSelectClause2
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause2.__Sealed? where __Sealed : PrimalShared.Kotlinx_coroutines_coreSelectClause2
extension PrimalShared.Skie.KotlinxSerializationCore.SerialKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case polymorphicKind(PrimalShared.Kotlinx_serialization_corePolymorphicKind)
    case primitiveKind(PrimalShared.Kotlinx_serialization_corePrimitiveKind)
    case cONTEXTUAL(PrimalShared.Kotlinx_serialization_coreSerialKind.CONTEXTUAL)
    case eNUM(PrimalShared.Kotlinx_serialization_coreSerialKind.ENUM)
    case structureKind(PrimalShared.Kotlinx_serialization_coreStructureKind)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.KotlinxSerializationCore.SerialKind.__Sealed, b: PrimalShared.Skie.KotlinxSerializationCore.SerialKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxSerializationCore.SerialKind.__Sealed where __Sealed : PrimalShared.Kotlinx_serialization_coreSerialKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxSerializationCore.SerialKind.__Sealed? where __Sealed : PrimalShared.Kotlinx_serialization_coreSerialKind
extension PrimalShared.Skie.KotlinxSerializationCore.SerializersModule {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: PrimalShared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed, b: PrimalShared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed where __Sealed : PrimalShared.Kotlinx_serialization_coreSerializersModule
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed? where __Sealed : PrimalShared.Kotlinx_serialization_coreSerializersModule
extension PrimalShared.Skie.KotlinxSerializationCore.PolymorphicKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case oPEN(PrimalShared.Kotlinx_serialization_corePolymorphicKind.OPEN)
    case sEALED(PrimalShared.Kotlinx_serialization_corePolymorphicKind.SEALED)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed, b: PrimalShared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed where __Sealed : PrimalShared.Kotlinx_serialization_corePolymorphicKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed? where __Sealed : PrimalShared.Kotlinx_serialization_corePolymorphicKind
extension PrimalShared.Skie.KotlinxSerializationCore.PrimitiveKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case bOOLEAN(PrimalShared.Kotlinx_serialization_corePrimitiveKind.BOOLEAN)
    case bYTE(PrimalShared.Kotlinx_serialization_corePrimitiveKind.BYTE)
    case cHAR(PrimalShared.Kotlinx_serialization_corePrimitiveKind.CHAR)
    case dOUBLE(PrimalShared.Kotlinx_serialization_corePrimitiveKind.DOUBLE)
    case fLOAT(PrimalShared.Kotlinx_serialization_corePrimitiveKind.FLOAT)
    case iNT(PrimalShared.Kotlinx_serialization_corePrimitiveKind.INT)
    case lONG(PrimalShared.Kotlinx_serialization_corePrimitiveKind.LONG)
    case sHORT(PrimalShared.Kotlinx_serialization_corePrimitiveKind.SHORT)
    case sTRING(PrimalShared.Kotlinx_serialization_corePrimitiveKind.STRING)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed, b: PrimalShared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed where __Sealed : PrimalShared.Kotlinx_serialization_corePrimitiveKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed? where __Sealed : PrimalShared.Kotlinx_serialization_corePrimitiveKind
extension PrimalShared.Skie.KotlinxSerializationCore.StructureKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case cLASS(PrimalShared.Kotlinx_serialization_coreStructureKind.CLASS)
    case lIST(PrimalShared.Kotlinx_serialization_coreStructureKind.LIST)
    case mAP(PrimalShared.Kotlinx_serialization_coreStructureKind.MAP)
    case oBJECT(PrimalShared.Kotlinx_serialization_coreStructureKind.OBJECT)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.KotlinxSerializationCore.StructureKind.__Sealed, b: PrimalShared.Skie.KotlinxSerializationCore.StructureKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxSerializationCore.StructureKind.__Sealed where __Sealed : PrimalShared.Kotlinx_serialization_coreStructureKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxSerializationCore.StructureKind.__Sealed? where __Sealed : PrimalShared.Kotlinx_serialization_coreStructureKind
extension PrimalShared.Skie.KotlinxSerializationJson.JsonElement {
  @frozen public enum __Sealed : Swift.Hashable {
    case jsonPrimitive(PrimalShared.Kotlinx_serialization_jsonJsonPrimitive)
    case `else`
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.KotlinxSerializationJson.JsonElement.__Sealed, b: PrimalShared.Skie.KotlinxSerializationJson.JsonElement.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxSerializationJson.JsonElement.__Sealed where __Sealed : PrimalShared.Kotlinx_serialization_jsonJsonElement
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxSerializationJson.JsonElement.__Sealed? where __Sealed : PrimalShared.Kotlinx_serialization_jsonJsonElement
extension PrimalShared.Skie.KotlinxSerializationJson.JsonPrimitive {
  @frozen public enum __Sealed : Swift.Hashable {
    case jsonNull(PrimalShared.Kotlinx_serialization_jsonJsonNull)
    case `else`
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.KotlinxSerializationJson.JsonPrimitive.__Sealed, b: PrimalShared.Skie.KotlinxSerializationJson.JsonPrimitive.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxSerializationJson.JsonPrimitive.__Sealed where __Sealed : PrimalShared.Kotlinx_serialization_jsonJsonPrimitive
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxSerializationJson.JsonPrimitive.__Sealed? where __Sealed : PrimalShared.Kotlinx_serialization_jsonJsonPrimitive
extension PrimalShared.Skie.KotlinxDatetime.DateTimeFormat {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: PrimalShared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed, b: PrimalShared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed where __Sealed : PrimalShared.Kotlinx_datetimeDateTimeFormat
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed? where __Sealed : PrimalShared.Kotlinx_datetimeDateTimeFormat
extension PrimalShared.Skie.RuntimeKotlin.Skie_SuspendResult {
  @frozen public enum __Sealed : Swift.Hashable {
    case canceled(PrimalShared.Skie_SuspendResult.Canceled)
    case error(PrimalShared.Skie_SuspendResult.Error)
    case success(PrimalShared.Skie_SuspendResult.Success)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed, b: PrimalShared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed where __Sealed : PrimalShared.Skie_SuspendResult
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed? where __Sealed : PrimalShared.Skie_SuspendResult
extension PrimalShared.Skie.PagingCommon.LoadState {
  @frozen public enum __Sealed : Swift.Hashable {
    case error(PrimalShared.Paging_commonLoadState.Error)
    case loading(PrimalShared.Paging_commonLoadState.Loading)
    case notLoading(PrimalShared.Paging_commonLoadState.NotLoading)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.PagingCommon.LoadState.__Sealed, b: PrimalShared.Skie.PagingCommon.LoadState.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.PagingCommon.LoadState.__Sealed where __Sealed : PrimalShared.Paging_commonLoadState
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.PagingCommon.LoadState.__Sealed? where __Sealed : PrimalShared.Paging_commonLoadState
extension Swift.String {
  public func cleanNostrUris() -> Swift.String
  public func extractEventId() -> Swift.String?
  public func extractNoteId() -> Swift.String?
  public func extractProfileId() -> Swift.String?
  public func isNAddr() -> Swift.Bool
  public func isNAddrUri() -> Swift.Bool
  public func isNEvent() -> Swift.Bool
  public func isNEventUri() -> Swift.Bool
  public func isNProfile() -> Swift.Bool
  public func isNProfileUri() -> Swift.Bool
  public func isNPub() -> Swift.Bool
  public func isNPubUri() -> Swift.Bool
  public func isNostrUri() -> Swift.Bool
  public func isNote() -> Swift.Bool
  public func isNoteUri() -> Swift.Bool
  public func takeAsNoteHexIdOrNull() -> Swift.String?
  public func takeAsProfileHexIdOrNull() -> Swift.String?
  public func extractAdvancedSearchQuery() -> Swift.String?
  public func extractPubkeyFromFeedSpec(prefix: Swift.String?, suffix: Swift.String?) -> Swift.String?
  public func extractSimpleSearchQuery() -> Swift.String?
  public func extractTopicFromFeedSpec() -> Swift.String?
  public func isAdvancedSearchFeedSpec() -> Swift.Bool
  public func isAudioSpec() -> Swift.Bool
  public func isImageSpec() -> Swift.Bool
  public func isNotesBookmarkFeedSpec() -> Swift.Bool
  public func isNotesFeedSpec() -> Swift.Bool
  public func isPremiumFeedSpec() -> Swift.Bool
  public func isProfileAuthoredNoteRepliesFeedSpec() -> Swift.Bool
  public func isProfileAuthoredNotesFeedSpec() -> Swift.Bool
  public func isProfileNotesFeedSpec() -> Swift.Bool
  public func isPubkeyFeedSpec(prefix: Swift.String?, suffix: Swift.String?) -> Swift.Bool
  public func isReadsFeedSpec() -> Swift.Bool
  public func isSearchFeedSpec() -> Swift.Bool
  public func isSimpleSearchFeedSpec() -> Swift.Bool
  public func isUserNotesFeedSpec() -> Swift.Bool
  public func isUserNotesLwrFeedSpec() -> Swift.Bool
  public func isVideoSpec() -> Swift.Bool
  public func resolveFeedSpecKind() -> PrimalShared.FeedSpecKind?
  public func supportsNoteReposts() -> Swift.Bool
  public func supportsUpwardsNotesPagination() -> Swift.Bool
  public func asAltTag() -> [PrimalShared.Kotlinx_serialization_jsonJsonElement]
  public func asContextTag() -> [PrimalShared.Kotlinx_serialization_jsonJsonElement]
  public func asEventIdTag(relayHint: Swift.String?, marker: Swift.String?, authorPubkey: Swift.String?) -> [PrimalShared.Kotlinx_serialization_jsonJsonElement]
  public func asIdentifierTag() -> [PrimalShared.Kotlinx_serialization_jsonJsonElement]
  public func asPubkeyTag(relayHint: Swift.String?, optional: Swift.String?) -> [PrimalShared.Kotlinx_serialization_jsonJsonElement]
  public func asReplaceableEventTag(relayHint: Swift.String?, marker: Swift.String?) -> [PrimalShared.Kotlinx_serialization_jsonJsonElement]
  public func parseHashtagTags() -> [[PrimalShared.Kotlinx_serialization_jsonJsonElement]]
  public func assureValidNsec() -> Swift.String
  public func bech32ToHexOrThrow() throws -> Swift.String
  public func bechToBytesOrThrow(hrp: Swift.String?) throws -> PrimalShared.KotlinByteArray
  public func hexToNoteHrp() -> Swift.String
  public func hexToNpubHrp() -> Swift.String
  public func hexToNsecHrp() -> Swift.String
  public func parseHashtags() -> [Swift.String]
  public func decodeLNUrlOrNull() -> Swift.String?
  public func parseAsLNUrlOrNull() -> Swift.String?
  public func asEllipsizedNpub() -> Swift.String
  public func formatNip05Identifier() -> Swift.String
}
public var DEFAULT_ZAP_CONFIG: [PrimalShared.ContentZapConfigItem] {
  get
}
public var DEFAULT_ZAP_DEFAULT: PrimalShared.ContentZapDefault {
  get
}
public var exploreMediaFeedSpec: Swift.String {
  get
}
public func buildAdvancedSearchNotesFeedSpec(query: Swift.String) -> Swift.String
public func buildAdvancedSearchNotificationsFeedSpec(query: Swift.String) -> Swift.String
public func buildAdvancedSearchReadsFeedSpec(query: Swift.String) -> Swift.String
public func buildArticleBookmarksFeedSpec(userId: Swift.String) -> Swift.String
public func buildLatestNotesUserFeedSpec(userId: Swift.String) -> Swift.String
public func buildNotesBookmarksFeedSpec(userId: Swift.String) -> Swift.String
public func buildReadsTopicFeedSpec(hashtag: Swift.String) -> Swift.String
public var FEED_KIND_DVM: Swift.String {
  get
}
public var FEED_KIND_PRIMAL: Swift.String {
  get
}
public var FEED_KIND_SEARCH: Swift.String {
  get
}
public var FEED_KIND_USER: Swift.String {
  get
}
public var MAX_RELAY_HINTS: Swift.Int32 {
  get
}
public func authorNameUiFriendly(displayName: Swift.String?, name: Swift.String?, pubkey: Swift.String) -> Swift.String
public func usernameUiFriendly(displayName: Swift.String?, name: Swift.String?, pubkey: Swift.String) -> Swift.String
extension PrimalShared.EventUriType : Swift.Sendable {}
extension PrimalShared.EventUriType : Swift.BitwiseCopyable {}
extension PrimalShared.EventUriNostrType : Swift.Sendable {}
extension PrimalShared.EventUriNostrType : Swift.BitwiseCopyable {}
extension PrimalShared.BookmarkType : Swift.Sendable {}
extension PrimalShared.BookmarkType : Swift.BitwiseCopyable {}
extension PrimalShared.ConversationRelation : Swift.Sendable {}
extension PrimalShared.ConversationRelation : Swift.BitwiseCopyable {}
extension PrimalShared.FeedSpecKind : Swift.Sendable {}
extension PrimalShared.FeedSpecKind : Swift.BitwiseCopyable {}
extension PrimalShared.PrimalScope : Swift.Sendable {}
extension PrimalShared.PrimalScope : Swift.BitwiseCopyable {}
extension PrimalShared.PrimalServerType : Swift.Sendable {}
extension PrimalShared.PrimalServerType : Swift.BitwiseCopyable {}
extension PrimalShared.PrimalTimeframe : Swift.Sendable {}
extension PrimalShared.PrimalTimeframe : Swift.BitwiseCopyable {}
extension PrimalShared.__Bridge__Nip19TLV_Type_ : Swift.Sendable {}
extension PrimalShared.__Bridge__Nip19TLV_Type_ : Swift.BitwiseCopyable {}
extension PrimalShared.NostrEventKind : Swift.Sendable {}
extension PrimalShared.NostrEventKind : Swift.BitwiseCopyable {}
extension PrimalShared.Paging_commonLoadType : Swift.Sendable {}
extension PrimalShared.Paging_commonLoadType : Swift.BitwiseCopyable {}
extension PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause0.__Sealed : Swift.Sendable {}
extension PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause0.__Sealed : Swift.BitwiseCopyable {}
extension PrimalShared.Skie.KotlinxCoroutinesCore.SelectInstance.__Sealed : Swift.Sendable {}
extension PrimalShared.Skie.KotlinxCoroutinesCore.SelectInstance.__Sealed : Swift.BitwiseCopyable {}
extension PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause1.__Sealed : Swift.Sendable {}
extension PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause1.__Sealed : Swift.BitwiseCopyable {}
extension PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause2.__Sealed : Swift.Sendable {}
extension PrimalShared.Skie.KotlinxCoroutinesCore.SelectClause2.__Sealed : Swift.BitwiseCopyable {}
extension PrimalShared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed : Swift.Sendable {}
extension PrimalShared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed : Swift.BitwiseCopyable {}
extension PrimalShared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed : Swift.Sendable {}
extension PrimalShared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed : Swift.BitwiseCopyable {}
