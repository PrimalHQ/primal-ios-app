// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -O -module-name PrimalShared
import Combine
import Foundation
@_exported import PrimalShared
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension PrimalShared.SkieSwiftFlowProtocol {
  public func toPublisher() -> some Combine.Publisher<Self.Element, _Concurrency.CancellationError>
  
}
extension Combine.Publisher where Self.Failure == _Concurrency.CancellationError {
  public func sink(receiveValue: @escaping ((Self.Output) -> Swift.Void)) -> Combine.AnyCancellable
}
public enum Skie {
  public enum RuntimeKotlin {
    public enum SkieColdFlowIterator {
      public typealias __Kotlin = PrimalShared.SkieColdFlowIterator
    }
    public enum SkieKotlinFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinFlow
    }
    public enum SkieKotlinMutableSharedFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinMutableSharedFlow
    }
    public enum SkieKotlinMutableStateFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinMutableStateFlow
    }
    public enum SkieKotlinOptionalFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinOptionalFlow
    }
    public enum SkieKotlinOptionalMutableSharedFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinOptionalMutableSharedFlow
    }
    public enum SkieKotlinOptionalMutableStateFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinOptionalMutableStateFlow
    }
    public enum SkieKotlinOptionalSharedFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinOptionalSharedFlow
    }
    public enum SkieKotlinOptionalStateFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinOptionalStateFlow
    }
    public enum SkieKotlinSharedFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinSharedFlow
    }
    public enum SkieKotlinStateFlow {
      public typealias __Kotlin = PrimalShared.SkieKotlinStateFlow
    }
    public enum Skie_CancellationHandler {
      public typealias __Kotlin = PrimalShared.Skie_CancellationHandler
    }
    public enum Skie_DispatcherDelegate {
      public typealias __Kotlin = PrimalShared.Skie_DispatcherDelegate
    }
    public enum Skie_SuspendHandler {
      public typealias __Kotlin = PrimalShared.Skie_SuspendHandler
    }
    public enum Skie_SuspendResult {
      public typealias __Kotlin = PrimalShared.Skie_SuspendResult
      public enum Success {
        public typealias __Kotlin = PrimalShared.Skie_SuspendResult.Success
      }
      public enum Error {
        public typealias __Kotlin = PrimalShared.Skie_SuspendResult.Error
      }
      public enum Canceled {
        public typealias __Kotlin = PrimalShared.Skie_SuspendResult.Canceled
      }
    }
  }
  public typealias co_touchlab_skie__runtime_kotlin = PrimalShared.Skie.RuntimeKotlin
  public enum KotlinxCoroutinesCore {
    public enum Flow {
      public typealias __Kotlin = PrimalShared.Kotlinx_coroutines_coreFlow
    }
    public enum StateFlow {
      public typealias __Kotlin = PrimalShared.Kotlinx_coroutines_coreStateFlow
    }
    public enum SharedFlow {
      public typealias __Kotlin = PrimalShared.Kotlinx_coroutines_coreSharedFlow
    }
    public enum MutableSharedFlow {
      public typealias __Kotlin = PrimalShared.Kotlinx_coroutines_coreMutableSharedFlow
    }
    public enum MutableStateFlow {
      public typealias __Kotlin = PrimalShared.Kotlinx_coroutines_coreMutableStateFlow
    }
    public enum Runnable {
      public typealias __Kotlin = PrimalShared.Kotlinx_coroutines_coreRunnable
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_coroutines_core = PrimalShared.Skie.KotlinxCoroutinesCore
  public enum PagingCommon {
    public enum PagingSource {
      public enum LoadResult {
      }
      public enum LoadParams {
      }
    }
    public enum LoadState {
    }
  }
  public typealias androidx_paging__paging_common = PrimalShared.Skie.PagingCommon
  public enum KotlinxSerializationJson {
    public enum JsonElement {
    }
    public enum Json {
    }
    public enum JsonPrimitive {
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_serialization_json = PrimalShared.Skie.KotlinxSerializationJson
  public enum KotlinxSerializationCore {
    public enum SerialKind {
    }
    public enum SerializersModule {
    }
    public enum PolymorphicKind {
    }
    public enum PrimitiveKind {
    }
    public enum StructureKind {
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_serialization_core = PrimalShared.Skie.KotlinxSerializationCore
  public enum KotlinxDatetime {
    public enum DateTimeFormat {
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_datetime = PrimalShared.Skie.KotlinxDatetime
}
@_hasMissingDesignatedInitializers public class SkieSwiftFlowIterator<T> : _Concurrency.AsyncIteratorProtocol {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func next() async -> T?
  @objc deinit
  public typealias Element = T
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncIteratorProtocol_Failure = Swift.Never
  #endif
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol SkieSwiftFlowProtocol<Element> : _Concurrency.AsyncSequence {
  associatedtype Element
  associatedtype Delegate : PrimalShared.Kotlinx_coroutines_coreFlow
}
#else
public protocol SkieSwiftFlowProtocol : _Concurrency.AsyncSequence {
  associatedtype Element
  associatedtype Delegate : PrimalShared.Kotlinx_coroutines_coreFlow
}
#endif
@_hasMissingDesignatedInitializers final public class SkieSwiftFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinOptionalFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinOptionalFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftSharedFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var replayCache: [T] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinSharedFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinSharedFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinSharedFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreSharedFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalSharedFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var replayCache: [T?] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreSharedFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableSharedFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var subscriptionCount: PrimalShared.SkieSwiftStateFlow<PrimalShared.KotlinInt> {
    get
  }
  final public var replayCache: [T] {
    get
  }
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T) async throws
  final public func tryEmit(value: T) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinMutableSharedFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinMutableSharedFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinMutableSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreMutableSharedFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableSharedFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var subscriptionCount: PrimalShared.SkieSwiftStateFlow<PrimalShared.KotlinInt> {
    get
  }
  final public var replayCache: [T?] {
    get
  }
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T?) async throws
  final public func tryEmit(value: T?) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreMutableSharedFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftStateFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T {
    get
  }
  final public var replayCache: [T] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinStateFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinStateFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinStateFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreStateFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalStateFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T? {
    get
  }
  final public var replayCache: [T?] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalStateFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalStateFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreStateFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableStateFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T {
    get
    set(value)
  }
  final public var replayCache: [T] {
    get
  }
  final public var subscriptionCount: PrimalShared.SkieSwiftStateFlow<PrimalShared.KotlinInt> {
    get
  }
  final public func compareAndSet(expect: T, update: T) -> Swift.Bool
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T) async throws
  final public func tryEmit(value: T) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinMutableStateFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinMutableStateFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinMutableStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinMutableStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinMutableStateFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreMutableStateFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableStateFlow<T> : PrimalShared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T? {
    get
    set(value)
  }
  final public var replayCache: [T?] {
    get
  }
  final public var subscriptionCount: PrimalShared.SkieSwiftStateFlow<PrimalShared.KotlinInt> {
    get
  }
  final public func compareAndSet(expect: T?, update: T?) -> Swift.Bool
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T?) async throws
  final public func tryEmit(value: T?) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>, result: inout PrimalShared.SkieSwiftOptionalMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> PrimalShared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = PrimalShared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = PrimalShared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  public typealias Delegate = any PrimalShared.Kotlinx_coroutines_coreMutableStateFlow
  #if compiler(>=5.3) && $AssociatedTypeImplements
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  #else
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias __AsyncSequence_Failure = Swift.Never
  #endif
  @objc deinit
}
extension PrimalShared.EventRelayHintsUpserterKt {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public static func eventRelayHintsUpserter(dao: any PrimalShared.EventRelayHintsDao, eventIds: [Swift.String], reducer: @escaping (PrimalShared.EventRelayHints) -> PrimalShared.EventRelayHints) async throws
}
public func __eventRelayHintsUpserter(dao: any PrimalShared.EventRelayHintsDao, eventIds: [Swift.String], reducer: @escaping (PrimalShared.EventRelayHints) -> PrimalShared.EventRelayHints, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
@available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
public func eventRelayHintsUpserter(dao: any PrimalShared.EventRelayHintsDao, eventIds: [Swift.String], reducer: @escaping (PrimalShared.EventRelayHints) -> PrimalShared.EventRelayHints) async throws
extension PrimalShared.Skie.RuntimeKotlin.SkieColdFlowIterator {
  public struct __Suspend<E> where E : AnyObject {
    public let __kotlinObject: PrimalShared.SkieColdFlowIterator<E>
    public init(_ __kotlinObject: PrimalShared.SkieColdFlowIterator<E>)
  }
}
public func skie<E>(_ kotlinObject: PrimalShared.SkieColdFlowIterator<E>) -> PrimalShared.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend<E> where E : AnyObject
extension PrimalShared.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func hasNext() async throws -> PrimalShared.KotlinBoolean
}
extension PrimalShared.Kotlinx_coroutines_coreFlow {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func collect(collector: any PrimalShared.Kotlinx_coroutines_coreFlowCollector) async throws
}
extension PrimalShared.Kotlinx_coroutines_coreFlowCollector {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func emit(value: Any?) async throws
}
extension PrimalShared.TrendingTopicDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteAll() async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertAll(data: [PrimalShared.TrendingTopic]) async throws
}
extension PrimalShared.ThreadConversationDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func connectArticleWithComment(data: [PrimalShared.ArticleCommentCrossRef]) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func connectNoteWithReply(data: [PrimalShared.NoteConversationCrossRef]) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findCrossRefByCommentId(commentNoteId: Swift.String) async throws -> PrimalShared.ArticleCommentCrossRef?
}
extension PrimalShared.RepostDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertAll(data: [PrimalShared.RepostData]) async throws
}
extension PrimalShared.PublicBookmarkDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteAllBookmarks(userId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteByTagValue(tagValue: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findByTagValue(tagValue: Swift.String) async throws -> PrimalShared.PublicBookmark?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertBookmarks(data: [PrimalShared.PublicBookmark]) async throws
}
extension PrimalShared.ProfileDataDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findMetadataEventId(profileId: Swift.String) async throws -> Swift.String
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findProfileData(profileId: Swift.String) async throws -> PrimalShared.ProfileData?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findProfileData(profileIds: [Swift.String]) async throws -> [PrimalShared.ProfileData]
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func insertOrReplaceAll(data: [PrimalShared.ProfileData]) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func insertOrUpdateAll(data: [PrimalShared.ProfileData]) async throws
}
extension PrimalShared.ProfileStatsDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func insertOrIgnore(data: [PrimalShared.ProfileStats]) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsert(data: PrimalShared.ProfileStats) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertAll(data: [PrimalShared.ProfileStats]) async throws
}
extension PrimalShared.PostDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findByPostId(postId: Swift.String) async throws -> PrimalShared.PostData?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findPosts(postIds: [Swift.String]) async throws -> [PrimalShared.PostData]
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertAll(data: [PrimalShared.PostData]) async throws
}
extension PrimalShared.NotificationDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func allCount(ownerId: Swift.String) async throws -> PrimalShared.KotlinInt
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteAllByOwnerId(ownerId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func first(ownerId: Swift.String) async throws -> PrimalShared.NotificationData?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func last(ownerId: Swift.String) async throws -> PrimalShared.NotificationData?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func markAllUnseenNotificationsAsSeen(ownerId: Swift.String, seenAt: Swift.Int64) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertAll(data: [PrimalShared.NotificationData]) async throws
}
extension PrimalShared.Skie.PagingCommon.PagingSource {
  public struct __Suspend<Key, Value> where Key : AnyObject, Value : AnyObject {
    public let __kotlinObject: PrimalShared.Paging_commonPagingSource<Key, Value>
    public init(_ __kotlinObject: PrimalShared.Paging_commonPagingSource<Key, Value>)
  }
}
public func skie<Key, Value>(_ kotlinObject: PrimalShared.Paging_commonPagingSource<Key, Value>) -> PrimalShared.Skie.PagingCommon.PagingSource.__Suspend<Key, Value> where Key : AnyObject, Value : AnyObject
extension PrimalShared.Skie.PagingCommon.PagingSource.__Suspend {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func load(params: PrimalShared.Paging_commonPagingSourceLoadParams<Key>) async throws -> PrimalShared.Paging_commonPagingSourceLoadResult<Key, Value>
}
extension PrimalShared.MutedUserDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteAllByOwnerId(ownerId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertAll(data: Swift.Set<PrimalShared.MutedUserData>) async throws
}
extension PrimalShared.DirectMessageDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteAllByOwnerId(ownerId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func firstByOwnerId(ownerId: Swift.String) async throws -> PrimalShared.DirectMessageData?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func firstByOwnerId(ownerId: Swift.String, participantId: Swift.String) async throws -> PrimalShared.DirectMessageData?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func lastByOwnerId(ownerId: Swift.String) async throws -> PrimalShared.DirectMessageData?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertAll(data: [PrimalShared.DirectMessageData]) async throws
}
extension PrimalShared.MessageConversationDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteAllByOwnerId(ownerId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func markAllConversationAsRead(ownerId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func markConversationAsRead(participantId: Swift.String, ownerId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertAll(data: [PrimalShared.MessageConversationData]) async throws
}
extension PrimalShared.HighlightDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteById(highlightId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsert(data: PrimalShared.HighlightData) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertAll(data: [PrimalShared.HighlightData]) async throws
}
extension PrimalShared.FeedPostDataCrossRefDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func connect(data: [PrimalShared.FeedPostDataCrossRef]) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteConnections(ownerId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteConnectionsByDirective(ownerId: Swift.String, feedSpec: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getOrderIndexForFeedSpec(ownerId: Swift.String, feedSpec: Swift.String) async throws -> PrimalShared.KotlinInt?
}
extension PrimalShared.FeedDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteAllByOwnerId(ownerId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteAllByOwnerIdAndSpec(ownerId: Swift.String, spec: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteAllByOwnerIdAndSpecKind(ownerId: Swift.String, specKind: PrimalShared.PrimalFeedSpecKind) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getAllFeedsBySpecKind(ownerId: Swift.String, specKind: PrimalShared.PrimalFeedSpecKind) async throws -> [PrimalShared.Feed]
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertAll(data: [PrimalShared.Feed]) async throws
}
extension PrimalShared.FeedPostRemoteKeyDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteAllByOwnerId(ownerId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteByDirective(ownerId: Swift.String, directive: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func find(postId: Swift.String?, repostId: Swift.String?, directive: Swift.String, ownerId: Swift.String) async throws -> PrimalShared.FeedPostRemoteKey?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findByEventId(ownerId: Swift.String, eventId: Swift.String) async throws -> PrimalShared.FeedPostRemoteKey?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findLatestByDirective(ownerId: Swift.String, directive: Swift.String) async throws -> PrimalShared.FeedPostRemoteKey?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func lastCachedAt(ownerId: Swift.String, directive: Swift.String) async throws -> PrimalShared.KotlinLong?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsert(data: [PrimalShared.FeedPostRemoteKey]) async throws
}
extension PrimalShared.FeedPostDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findAllPostsByIds(postIds: [Swift.String]) async throws -> [PrimalShared.FeedPost]
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func newestFeedPosts(query: PrimalShared.Room_runtimeRoomRawQuery) async throws -> [PrimalShared.FeedPost]
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func oldestFeedPosts(query: PrimalShared.Room_runtimeRoomRawQuery) async throws -> [PrimalShared.FeedPost]
}
extension PrimalShared.EventZapDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func delete(senderId: Swift.String, receiverId: Swift.String, noteId: Swift.String, timestamp: Swift.Int64) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func insert(data: PrimalShared.EventZap) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertAll(data: [PrimalShared.EventZap]) async throws
}
extension PrimalShared.EventUserStatsDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func find(eventId: Swift.String, userId: Swift.String) async throws -> PrimalShared.EventUserStats?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsert(data: PrimalShared.EventUserStats) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertAll(data: [PrimalShared.EventUserStats]) async throws
}
extension PrimalShared.EventUriDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func loadEventUris(noteId: Swift.String, types: [PrimalShared.PrimalEventUriType]) async throws -> [PrimalShared.EventUri]
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertAllEventNostrUris(data: [PrimalShared.EventUriNostr]) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertAllEventUris(data: [PrimalShared.EventUri]) async throws
}
extension PrimalShared.EventStatsDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func find(eventId: Swift.String) async throws -> PrimalShared.EventStats?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsert(data: PrimalShared.EventStats) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertAll(data: [PrimalShared.EventStats]) async throws
}
extension PrimalShared.EventRelayHintsDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findById(eventIds: [Swift.String]) async throws -> [PrimalShared.EventRelayHints]
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func insert(data: [PrimalShared.EventRelayHints]) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func update(data: [PrimalShared.EventRelayHints]) async throws
}
extension PrimalShared.Room_runtimeInvalidationTracker {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func refresh(tables: PrimalShared.KotlinArray<Foundation.NSString>) async throws -> PrimalShared.KotlinBoolean
}
extension PrimalShared.ArticleDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upsertAll(list: [PrimalShared.ArticleData]) async throws
}
extension PrimalShared.ArticleFeedCrossRefDao {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func connect(data: [PrimalShared.ArticleFeedCrossRef]) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteConnections(ownerId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteConnectionsBySpec(ownerId: Swift.String, spec: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findLastBySpec(ownerId: Swift.String, spec: Swift.String) async throws -> PrimalShared.ArticleFeedCrossRef?
}
extension PrimalShared.KotlinSuspendFunction0 {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func invoke() async throws -> Any?
}
extension PrimalShared.PrimalFeedRepository {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func fetchConversation(userId: Swift.String, noteId: Swift.String) async throws
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findAllPostsByIds(postIds: [Swift.String]) async throws -> [PrimalShared.PrimalFeedPost]
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func findConversation(userId: Swift.String, noteId: Swift.String) async throws -> [PrimalShared.PrimalFeedPost]
}
extension PrimalShared.Room_runtimeRoomDatabase {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func withReadOnlyTransaction(block: any PrimalShared.KotlinSuspendFunction0) async throws -> Any?
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func withTransaction(block: any PrimalShared.KotlinSuspendFunction0) async throws -> Any?
}
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftFlow<T>) -> PrimalShared.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftSharedFlow<T>) -> PrimalShared.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftFlow<T>) -> PrimalShared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftSharedFlow<T>) -> PrimalShared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
}
extension PrimalShared.SkieSwiftFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
}
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftOptionalFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>)
}
extension PrimalShared.SkieSwiftOptionalFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>)
}
public func SkieKotlinSharedFlow<T>(_ flow: PrimalShared.SkieSwiftSharedFlow<T>) -> PrimalShared.SkieKotlinSharedFlow<T> where T : AnyObject
public func SkieKotlinSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinSharedFlow<T> where T : AnyObject
public func SkieKotlinSharedFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinSharedFlow<T> where T : AnyObject
public func SkieKotlinSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinSharedFlow<T> where T : AnyObject
public func SkieKotlinSharedFlow<T>(_ flow: PrimalShared.SkieSwiftSharedFlow<T>) -> PrimalShared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinSharedFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftSharedFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
}
extension PrimalShared.SkieSwiftSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
}
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftOptionalSharedFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>)
}
extension PrimalShared.SkieSwiftOptionalSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>)
}
public func SkieKotlinMutableSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinMutableSharedFlow<T> where T : AnyObject
public func SkieKotlinMutableSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
}
extension PrimalShared.SkieSwiftMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
}
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>) -> PrimalShared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftOptionalMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>)
}
extension PrimalShared.SkieSwiftOptionalMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableSharedFlow<T>)
}
public func SkieKotlinStateFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinStateFlow<T> where T : AnyObject
public func SkieKotlinStateFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinStateFlow<T> where T : AnyObject
public func SkieKotlinStateFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinStateFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftStateFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
}
extension PrimalShared.SkieSwiftStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
}
public func SkieKotlinOptionalStateFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalStateFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>) -> PrimalShared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalStateFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalStateFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalStateFlow<T>(_ flow: PrimalShared.SkieSwiftStateFlow<T>) -> PrimalShared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalStateFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>) -> PrimalShared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalStateFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalStateFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftOptionalStateFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>)
}
extension PrimalShared.SkieSwiftOptionalStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>)
}
public func SkieKotlinMutableStateFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinMutableStateFlow<T> where T : AnyObject
public func SkieKotlinMutableStateFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
}
extension PrimalShared.SkieSwiftMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
}
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>) -> PrimalShared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension PrimalShared.SkieSwiftOptionalMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>)
}
extension PrimalShared.SkieSwiftOptionalMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: PrimalShared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: PrimalShared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: PrimalShared.SkieSwiftOptionalMutableStateFlow<T>)
}
@frozen public enum PrimalVerb : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case followList
  case userInfos
  case userProfile
  case userProfileFollowedBy
  case userFollowers
  case userRelays2
  case recommendedUsers
  case getAppSettings
  case getDefaultAppSettings
  case setAppSettings
  case threadView
  case events
  case userSearch
  case importEvents
  case getNotifications
  case getLastSeenNotifications
  case setLastSeenNotifications
  case newNotificationsCount
  case uploadChunk
  case uploadComplete
  case muteList
  case getDmContacts
  case getDms
  case markDmConversationAsRead
  case markAllDmsAsRead
  case newDmsCount
  case defaultRelays
  case isUserFollowing
  case getBookmarksList
  case eventZaps
  case eventActions
  case broadcastEvents
  case articleThreadView
  case getHighlights
  case megaFeedDirective
  case getFeaturedDvmFeeds
  case getDefaultAppSubSettings
  case getAppSubSettings
  case setAppSubSettings
  case exploreTopics
  case explorePeople
  case exploreZaps
  case clientConfig
  case mediaManagementStats
  case mediaManagementUploads
  case mediaManagementDelete
  case wallet
  case walletMonitor
  case walletMembershipNameAvailable
  case walletMembershipChangeName
  case walletMembershipStatus
  case walletPurchaseMembership
  case walletMembershipProducts
  case walletMembershipCancel
  case walletMembershipPurchaseMonitor
  case walletMembershipPurchaseHistory
  case walletMembershipLegendCustomization
  case membershipRecoveryContactLists
  case membershipContentStats
  case membershipContentBroadcastStart
  case membershipContentBroadcastCancel
  case membershipContentBroadcastStatus
  case membershipLegendsLeaderboard
  case membershipPremiumLeaderboard
  case membershipMonitorContentBroadcastStatus
  public var id: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__PrimalVerb, result: inout PrimalShared.PrimalVerb?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalVerb, result: inout PrimalShared.PrimalVerb?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalVerb?) -> PrimalShared.PrimalVerb
  public func _bridgeToObjectiveC() -> PrimalShared.__PrimalVerb
  public typealias _ObjectiveCType = PrimalShared.__PrimalVerb
  public static func == (a: PrimalShared.PrimalVerb, b: PrimalShared.PrimalVerb) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.PrimalVerb]
  nonisolated public static var allCases: [PrimalShared.PrimalVerb] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.PrimalVerb {
  public func toKotlinEnum() -> PrimalShared.__PrimalVerb
}
extension PrimalShared.__PrimalVerb {
  public func toSwiftEnum() -> PrimalShared.PrimalVerb
}
@frozen public enum NotificationType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case newUserFollowedYou
  case yourPostWasZapped
  case yourPostWasLiked
  case yourPostWasReposted
  case yourPostWasRepliedTo
  case youWereMentionedInPost
  case yourPostWasMentionedInPost
  case postYouWereMentionedInWasZapped
  case postYouWereMentionedInWasLiked
  case postYouWereMentionedInWasReposted
  case postYouWereMentionedInWasRepliedTo
  case postYourPostWasMentionedInWasZapped
  case postYourPostWasMentionedInWasLiked
  case postYourPostWasMentionedInWasReposted
  case postYourPostWasMentionedInWasRepliedTo
  public var collapsable: Swift.Bool {
    get
  }
  public var id: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var section: PrimalShared.NotificationSection {
    get
  }
  public var type: Swift.Int32 {
    get
  }
  public static var companion: PrimalShared.__NotificationType.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__NotificationType, result: inout PrimalShared.NotificationType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__NotificationType, result: inout PrimalShared.NotificationType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__NotificationType?) -> PrimalShared.NotificationType
  public func _bridgeToObjectiveC() -> PrimalShared.__NotificationType
  public typealias _ObjectiveCType = PrimalShared.__NotificationType
  public typealias Companion = PrimalShared.__NotificationType.Companion
  public static func == (a: PrimalShared.NotificationType, b: PrimalShared.NotificationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.NotificationType]
  nonisolated public static var allCases: [PrimalShared.NotificationType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.NotificationType {
  public func toKotlinEnum() -> PrimalShared.__NotificationType
}
extension PrimalShared.__NotificationType {
  public func toSwiftEnum() -> PrimalShared.NotificationType
}
@frozen public enum NotificationSection : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case coreNotifications
  case noteYouWereMentionedIn
  case noteYourNoteWasMentionedIn
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__NotificationSection, result: inout PrimalShared.NotificationSection?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__NotificationSection, result: inout PrimalShared.NotificationSection?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__NotificationSection?) -> PrimalShared.NotificationSection
  public func _bridgeToObjectiveC() -> PrimalShared.__NotificationSection
  public typealias _ObjectiveCType = PrimalShared.__NotificationSection
  public static func == (a: PrimalShared.NotificationSection, b: PrimalShared.NotificationSection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.NotificationSection]
  nonisolated public static var allCases: [PrimalShared.NotificationSection] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.NotificationSection {
  public func toKotlinEnum() -> PrimalShared.__NotificationSection
}
extension PrimalShared.__NotificationSection {
  public func toSwiftEnum() -> PrimalShared.NotificationSection
}
@frozen public enum Kotlinx_serialization_jsonClassDiscriminatorMode : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case none
  case allJsonObjects
  case polymorphic
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__Kotlinx_serialization_jsonClassDiscriminatorMode, result: inout PrimalShared.Kotlinx_serialization_jsonClassDiscriminatorMode?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__Kotlinx_serialization_jsonClassDiscriminatorMode, result: inout PrimalShared.Kotlinx_serialization_jsonClassDiscriminatorMode?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__Kotlinx_serialization_jsonClassDiscriminatorMode?) -> PrimalShared.Kotlinx_serialization_jsonClassDiscriminatorMode
  public func _bridgeToObjectiveC() -> PrimalShared.__Kotlinx_serialization_jsonClassDiscriminatorMode
  public typealias _ObjectiveCType = PrimalShared.__Kotlinx_serialization_jsonClassDiscriminatorMode
  public static func == (a: PrimalShared.Kotlinx_serialization_jsonClassDiscriminatorMode, b: PrimalShared.Kotlinx_serialization_jsonClassDiscriminatorMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.Kotlinx_serialization_jsonClassDiscriminatorMode]
  nonisolated public static var allCases: [PrimalShared.Kotlinx_serialization_jsonClassDiscriminatorMode] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.Kotlinx_serialization_jsonClassDiscriminatorMode {
  public func toKotlinEnum() -> PrimalShared.__Kotlinx_serialization_jsonClassDiscriminatorMode
}
extension PrimalShared.__Kotlinx_serialization_jsonClassDiscriminatorMode {
  public func toSwiftEnum() -> PrimalShared.Kotlinx_serialization_jsonClassDiscriminatorMode
}
@frozen public enum PrimalEventUriType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case image
  case video
  case audio
  case pdf
  case youTube
  case rumble
  case spotify
  case tidal
  case gitHub
  case other
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__PrimalEventUriType, result: inout PrimalShared.PrimalEventUriType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalEventUriType, result: inout PrimalShared.PrimalEventUriType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalEventUriType?) -> PrimalShared.PrimalEventUriType
  public func _bridgeToObjectiveC() -> PrimalShared.__PrimalEventUriType
  public typealias _ObjectiveCType = PrimalShared.__PrimalEventUriType
  public static func == (a: PrimalShared.PrimalEventUriType, b: PrimalShared.PrimalEventUriType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.PrimalEventUriType]
  nonisolated public static var allCases: [PrimalShared.PrimalEventUriType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.PrimalEventUriType {
  public func toKotlinEnum() -> PrimalShared.__PrimalEventUriType
}
extension PrimalShared.__PrimalEventUriType {
  public func toSwiftEnum() -> PrimalShared.PrimalEventUriType
}
@frozen public enum PrimalEventUriNostrType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case zap
  case note
  case profile
  case article
  case highlight
  case unsupported
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static var companion: PrimalShared.__PrimalEventUriNostrType.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__PrimalEventUriNostrType, result: inout PrimalShared.PrimalEventUriNostrType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalEventUriNostrType, result: inout PrimalShared.PrimalEventUriNostrType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalEventUriNostrType?) -> PrimalShared.PrimalEventUriNostrType
  public func _bridgeToObjectiveC() -> PrimalShared.__PrimalEventUriNostrType
  public typealias _ObjectiveCType = PrimalShared.__PrimalEventUriNostrType
  public typealias Companion = PrimalShared.__PrimalEventUriNostrType.Companion
  public static func == (a: PrimalShared.PrimalEventUriNostrType, b: PrimalShared.PrimalEventUriNostrType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.PrimalEventUriNostrType]
  nonisolated public static var allCases: [PrimalShared.PrimalEventUriNostrType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.PrimalEventUriNostrType {
  public func toKotlinEnum() -> PrimalShared.__PrimalEventUriNostrType
}
extension PrimalShared.__PrimalEventUriNostrType {
  public func toSwiftEnum() -> PrimalShared.PrimalEventUriNostrType
}
@frozen public enum PrimalBookmarkType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case note
  case article
  public var id: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__PrimalBookmarkType, result: inout PrimalShared.PrimalBookmarkType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalBookmarkType, result: inout PrimalShared.PrimalBookmarkType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalBookmarkType?) -> PrimalShared.PrimalBookmarkType
  public func _bridgeToObjectiveC() -> PrimalShared.__PrimalBookmarkType
  public typealias _ObjectiveCType = PrimalShared.__PrimalBookmarkType
  public static func == (a: PrimalShared.PrimalBookmarkType, b: PrimalShared.PrimalBookmarkType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.PrimalBookmarkType]
  nonisolated public static var allCases: [PrimalShared.PrimalBookmarkType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.PrimalBookmarkType {
  public func toKotlinEnum() -> PrimalShared.__PrimalBookmarkType
}
extension PrimalShared.__PrimalBookmarkType {
  public func toSwiftEnum() -> PrimalShared.PrimalBookmarkType
}
@frozen public enum PrimalConversationRelation : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case follows
  case other
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static var companion: PrimalShared.__PrimalConversationRelation.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__PrimalConversationRelation, result: inout PrimalShared.PrimalConversationRelation?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalConversationRelation, result: inout PrimalShared.PrimalConversationRelation?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalConversationRelation?) -> PrimalShared.PrimalConversationRelation
  public func _bridgeToObjectiveC() -> PrimalShared.__PrimalConversationRelation
  public typealias _ObjectiveCType = PrimalShared.__PrimalConversationRelation
  public typealias Companion = PrimalShared.__PrimalConversationRelation.Companion
  public static func == (a: PrimalShared.PrimalConversationRelation, b: PrimalShared.PrimalConversationRelation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.PrimalConversationRelation]
  nonisolated public static var allCases: [PrimalShared.PrimalConversationRelation] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.PrimalConversationRelation {
  public func toKotlinEnum() -> PrimalShared.__PrimalConversationRelation
}
extension PrimalShared.__PrimalConversationRelation {
  public func toSwiftEnum() -> PrimalShared.PrimalConversationRelation
}
@frozen public enum PrimalFeedSpecKind : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case reads
  case notes
  public var id: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__PrimalFeedSpecKind, result: inout PrimalShared.PrimalFeedSpecKind?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalFeedSpecKind, result: inout PrimalShared.PrimalFeedSpecKind?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__PrimalFeedSpecKind?) -> PrimalShared.PrimalFeedSpecKind
  public func _bridgeToObjectiveC() -> PrimalShared.__PrimalFeedSpecKind
  public typealias _ObjectiveCType = PrimalShared.__PrimalFeedSpecKind
  public static func == (a: PrimalShared.PrimalFeedSpecKind, b: PrimalShared.PrimalFeedSpecKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.PrimalFeedSpecKind]
  nonisolated public static var allCases: [PrimalShared.PrimalFeedSpecKind] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.PrimalFeedSpecKind {
  public func toKotlinEnum() -> PrimalShared.__PrimalFeedSpecKind
}
extension PrimalShared.__PrimalFeedSpecKind {
  public func toSwiftEnum() -> PrimalShared.PrimalFeedSpecKind
}
@frozen public enum Paging_commonLoadType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case refresh
  case prepend
  case append
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: PrimalShared.__Paging_commonLoadType, result: inout PrimalShared.Paging_commonLoadType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: PrimalShared.__Paging_commonLoadType, result: inout PrimalShared.Paging_commonLoadType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: PrimalShared.__Paging_commonLoadType?) -> PrimalShared.Paging_commonLoadType
  public func _bridgeToObjectiveC() -> PrimalShared.__Paging_commonLoadType
  public typealias _ObjectiveCType = PrimalShared.__Paging_commonLoadType
  public static func == (a: PrimalShared.Paging_commonLoadType, b: PrimalShared.Paging_commonLoadType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PrimalShared.Paging_commonLoadType]
  nonisolated public static var allCases: [PrimalShared.Paging_commonLoadType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PrimalShared.Paging_commonLoadType {
  public func toKotlinEnum() -> PrimalShared.__Paging_commonLoadType
}
extension PrimalShared.__Paging_commonLoadType {
  public func toSwiftEnum() -> PrimalShared.Paging_commonLoadType
}
extension PrimalShared.Skie.RuntimeKotlin.Skie_SuspendResult {
  @frozen public enum __Sealed : Swift.Hashable {
    case canceled(PrimalShared.Skie_SuspendResult.Canceled)
    case error(PrimalShared.Skie_SuspendResult.Error)
    case success(PrimalShared.Skie_SuspendResult.Success)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed, b: PrimalShared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed where __Sealed : PrimalShared.Skie_SuspendResult
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed? where __Sealed : PrimalShared.Skie_SuspendResult
extension PrimalShared.Skie.KotlinxSerializationJson.JsonElement {
  @frozen public enum __Sealed : Swift.Hashable {
    case jsonPrimitive(PrimalShared.Kotlinx_serialization_jsonJsonPrimitive)
    case `else`
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.KotlinxSerializationJson.JsonElement.__Sealed, b: PrimalShared.Skie.KotlinxSerializationJson.JsonElement.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxSerializationJson.JsonElement.__Sealed where __Sealed : PrimalShared.Kotlinx_serialization_jsonJsonElement
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxSerializationJson.JsonElement.__Sealed? where __Sealed : PrimalShared.Kotlinx_serialization_jsonJsonElement
extension PrimalShared.Skie.KotlinxSerializationJson.Json {
  @frozen public enum __Sealed : Swift.Hashable {
    case `default`(PrimalShared.Kotlinx_serialization_jsonJson.Default)
    case `else`
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.KotlinxSerializationJson.Json.__Sealed, b: PrimalShared.Skie.KotlinxSerializationJson.Json.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxSerializationJson.Json.__Sealed where __Sealed : PrimalShared.Kotlinx_serialization_jsonJson
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxSerializationJson.Json.__Sealed? where __Sealed : PrimalShared.Kotlinx_serialization_jsonJson
extension PrimalShared.Skie.KotlinxSerializationJson.JsonPrimitive {
  @frozen public enum __Sealed : Swift.Hashable {
    case jsonNull(PrimalShared.Kotlinx_serialization_jsonJsonNull)
    case `else`
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.KotlinxSerializationJson.JsonPrimitive.__Sealed, b: PrimalShared.Skie.KotlinxSerializationJson.JsonPrimitive.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxSerializationJson.JsonPrimitive.__Sealed where __Sealed : PrimalShared.Kotlinx_serialization_jsonJsonPrimitive
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxSerializationJson.JsonPrimitive.__Sealed? where __Sealed : PrimalShared.Kotlinx_serialization_jsonJsonPrimitive
extension PrimalShared.Skie.KotlinxSerializationCore.SerialKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case polymorphicKind(PrimalShared.Kotlinx_serialization_corePolymorphicKind)
    case primitiveKind(PrimalShared.Kotlinx_serialization_corePrimitiveKind)
    case cONTEXTUAL(PrimalShared.Kotlinx_serialization_coreSerialKind.CONTEXTUAL)
    case eNUM(PrimalShared.Kotlinx_serialization_coreSerialKind.ENUM)
    case structureKind(PrimalShared.Kotlinx_serialization_coreStructureKind)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.KotlinxSerializationCore.SerialKind.__Sealed, b: PrimalShared.Skie.KotlinxSerializationCore.SerialKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxSerializationCore.SerialKind.__Sealed where __Sealed : PrimalShared.Kotlinx_serialization_coreSerialKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxSerializationCore.SerialKind.__Sealed? where __Sealed : PrimalShared.Kotlinx_serialization_coreSerialKind
extension PrimalShared.Skie.KotlinxSerializationCore.SerializersModule {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: PrimalShared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed, b: PrimalShared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed where __Sealed : PrimalShared.Kotlinx_serialization_coreSerializersModule
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed? where __Sealed : PrimalShared.Kotlinx_serialization_coreSerializersModule
extension PrimalShared.Skie.KotlinxSerializationCore.PolymorphicKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case oPEN(PrimalShared.Kotlinx_serialization_corePolymorphicKind.OPEN)
    case sEALED(PrimalShared.Kotlinx_serialization_corePolymorphicKind.SEALED)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed, b: PrimalShared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed where __Sealed : PrimalShared.Kotlinx_serialization_corePolymorphicKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed? where __Sealed : PrimalShared.Kotlinx_serialization_corePolymorphicKind
extension PrimalShared.Skie.KotlinxSerializationCore.PrimitiveKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case bOOLEAN(PrimalShared.Kotlinx_serialization_corePrimitiveKind.BOOLEAN)
    case bYTE(PrimalShared.Kotlinx_serialization_corePrimitiveKind.BYTE)
    case cHAR(PrimalShared.Kotlinx_serialization_corePrimitiveKind.CHAR)
    case dOUBLE(PrimalShared.Kotlinx_serialization_corePrimitiveKind.DOUBLE)
    case fLOAT(PrimalShared.Kotlinx_serialization_corePrimitiveKind.FLOAT)
    case iNT(PrimalShared.Kotlinx_serialization_corePrimitiveKind.INT)
    case lONG(PrimalShared.Kotlinx_serialization_corePrimitiveKind.LONG)
    case sHORT(PrimalShared.Kotlinx_serialization_corePrimitiveKind.SHORT)
    case sTRING(PrimalShared.Kotlinx_serialization_corePrimitiveKind.STRING)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed, b: PrimalShared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed where __Sealed : PrimalShared.Kotlinx_serialization_corePrimitiveKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed? where __Sealed : PrimalShared.Kotlinx_serialization_corePrimitiveKind
extension PrimalShared.Skie.KotlinxSerializationCore.StructureKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case cLASS(PrimalShared.Kotlinx_serialization_coreStructureKind.CLASS)
    case lIST(PrimalShared.Kotlinx_serialization_coreStructureKind.LIST)
    case mAP(PrimalShared.Kotlinx_serialization_coreStructureKind.MAP)
    case oBJECT(PrimalShared.Kotlinx_serialization_coreStructureKind.OBJECT)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.KotlinxSerializationCore.StructureKind.__Sealed, b: PrimalShared.Skie.KotlinxSerializationCore.StructureKind.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxSerializationCore.StructureKind.__Sealed where __Sealed : PrimalShared.Kotlinx_serialization_coreStructureKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxSerializationCore.StructureKind.__Sealed? where __Sealed : PrimalShared.Kotlinx_serialization_coreStructureKind
extension PrimalShared.Skie.PagingCommon.PagingSource.LoadResult {
  @frozen public enum __Sealed<Key, Value> : Swift.Hashable where Key : AnyObject, Value : AnyObject {
    case error(PrimalShared.Paging_commonPagingSourceLoadResultError<Key, Value>)
    case invalid(PrimalShared.Paging_commonPagingSourceLoadResultInvalid<Key, Value>)
    case page(PrimalShared.Paging_commonPagingSourceLoadResultPage<Key, Value>)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.PagingCommon.PagingSource.LoadResult.__Sealed<Key, Value>, b: PrimalShared.Skie.PagingCommon.PagingSource.LoadResult.__Sealed<Key, Value>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<Key, Value, __Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.PagingCommon.PagingSource.LoadResult.__Sealed<Key, Value> where Key : AnyObject, Value : AnyObject, __Sealed : PrimalShared.Paging_commonPagingSourceLoadResult<Key, Value>
@_disfavoredOverload public func onEnum<Key, Value, __Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.PagingCommon.PagingSource.LoadResult.__Sealed<Key, Value>? where Key : AnyObject, Value : AnyObject, __Sealed : PrimalShared.Paging_commonPagingSourceLoadResult<Key, Value>
extension PrimalShared.Skie.PagingCommon.PagingSource.LoadParams {
  @frozen public enum __Sealed<Key> : Swift.Hashable where Key : AnyObject {
    case append(PrimalShared.Paging_commonPagingSourceLoadParamsAppend<Key>)
    case prepend(PrimalShared.Paging_commonPagingSourceLoadParamsPrepend<Key>)
    case refresh(PrimalShared.Paging_commonPagingSourceLoadParamsRefresh<Key>)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.PagingCommon.PagingSource.LoadParams.__Sealed<Key>, b: PrimalShared.Skie.PagingCommon.PagingSource.LoadParams.__Sealed<Key>) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<Key, __Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.PagingCommon.PagingSource.LoadParams.__Sealed<Key> where Key : AnyObject, __Sealed : PrimalShared.Paging_commonPagingSourceLoadParams<Key>
@_disfavoredOverload public func onEnum<Key, __Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.PagingCommon.PagingSource.LoadParams.__Sealed<Key>? where Key : AnyObject, __Sealed : PrimalShared.Paging_commonPagingSourceLoadParams<Key>
extension PrimalShared.Skie.PagingCommon.LoadState {
  @frozen public enum __Sealed : Swift.Hashable {
    case error(PrimalShared.Paging_commonLoadState.Error)
    case loading(PrimalShared.Paging_commonLoadState.Loading)
    case notLoading(PrimalShared.Paging_commonLoadState.NotLoading)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PrimalShared.Skie.PagingCommon.LoadState.__Sealed, b: PrimalShared.Skie.PagingCommon.LoadState.__Sealed) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.PagingCommon.LoadState.__Sealed where __Sealed : PrimalShared.Paging_commonLoadState
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.PagingCommon.LoadState.__Sealed? where __Sealed : PrimalShared.Paging_commonLoadState
extension PrimalShared.Skie.KotlinxDatetime.DateTimeFormat {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: PrimalShared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed, b: PrimalShared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> PrimalShared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed where __Sealed : PrimalShared.Kotlinx_datetimeDateTimeFormat
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> PrimalShared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed? where __Sealed : PrimalShared.Kotlinx_datetimeDateTimeFormat
extension Swift.String {
  public func cleanNostrUris() -> Swift.String
  public func detectUrls() -> [Swift.String]
  public func extractEventId() -> Swift.String?
  public func extractNoteId() -> Swift.String?
  public func extractProfileId() -> Swift.String?
  public func isNAddr() -> Swift.Bool
  public func isNAddrUri() -> Swift.Bool
  public func isNEvent() -> Swift.Bool
  public func isNEventUri() -> Swift.Bool
  public func isNProfile() -> Swift.Bool
  public func isNProfileUri() -> Swift.Bool
  public func isNPub() -> Swift.Bool
  public func isNPubUri() -> Swift.Bool
  public func isNostrUri() -> Swift.Bool
  public func isNote() -> Swift.Bool
  public func isNoteUri() -> Swift.Bool
  public func takeAsNoteHexIdOrNull() -> Swift.String?
  public func takeAsProfileHexIdOrNull() -> Swift.String?
}
public var DEFAULT_ZAP_CONFIG: [PrimalShared.ContentZapConfigItem] {
  get
}
public var DEFAULT_ZAP_DEFAULT: PrimalShared.ContentZapDefault {
  get
}
public var NostrJson: PrimalShared.Kotlinx_serialization_jsonJson {
  get
}
public var NostrJsonEncodeDefaults: PrimalShared.Kotlinx_serialization_jsonJson {
  get
}
public var NostrJsonImplicitNulls: PrimalShared.Kotlinx_serialization_jsonJson {
  get
}
public var NostrNotaryJson: PrimalShared.Kotlinx_serialization_jsonJson {
  get
}
extension PrimalShared.PrimalVerb : Swift.Sendable {}
extension PrimalShared.PrimalVerb : Swift.BitwiseCopyable {}
extension PrimalShared.NotificationType : Swift.Sendable {}
extension PrimalShared.NotificationType : Swift.BitwiseCopyable {}
extension PrimalShared.NotificationSection : Swift.Sendable {}
extension PrimalShared.NotificationSection : Swift.BitwiseCopyable {}
extension PrimalShared.Kotlinx_serialization_jsonClassDiscriminatorMode : Swift.Sendable {}
extension PrimalShared.Kotlinx_serialization_jsonClassDiscriminatorMode : Swift.BitwiseCopyable {}
extension PrimalShared.PrimalEventUriType : Swift.Sendable {}
extension PrimalShared.PrimalEventUriType : Swift.BitwiseCopyable {}
extension PrimalShared.PrimalEventUriNostrType : Swift.Sendable {}
extension PrimalShared.PrimalEventUriNostrType : Swift.BitwiseCopyable {}
extension PrimalShared.PrimalBookmarkType : Swift.Sendable {}
extension PrimalShared.PrimalBookmarkType : Swift.BitwiseCopyable {}
extension PrimalShared.PrimalConversationRelation : Swift.Sendable {}
extension PrimalShared.PrimalConversationRelation : Swift.BitwiseCopyable {}
extension PrimalShared.PrimalFeedSpecKind : Swift.Sendable {}
extension PrimalShared.PrimalFeedSpecKind : Swift.BitwiseCopyable {}
extension PrimalShared.Paging_commonLoadType : Swift.Sendable {}
extension PrimalShared.Paging_commonLoadType : Swift.BitwiseCopyable {}
extension PrimalShared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed : Swift.Sendable {}
extension PrimalShared.Skie.KotlinxSerializationCore.SerializersModule.__Sealed : Swift.BitwiseCopyable {}
extension PrimalShared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed : Swift.Sendable {}
extension PrimalShared.Skie.KotlinxDatetime.DateTimeFormat.__Sealed : Swift.BitwiseCopyable {}
